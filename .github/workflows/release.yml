name: Build & Publish (Windows)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      # Optional provider defaults for build (app can still override via Settings)
      VITE_PROVIDER: free
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            # Windows
            ~\AppData\Local\electron\Cache
            ~\AppData\Local\electron-builder\Cache
            # macOS
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
            # Linux
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build web assets (with env)
        run: npm run build:web

      - name: Build and publish release (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          # Provider default remains Free; VITE_POLYGON_KEY is optional and not required
          VITE_PROVIDER: free
        run: npx electron-builder --publish always -c.extraMetadata.main=electron/main.cjs

      - name: Append checksums to GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const crypto = require('crypto');
            const distDir = 'dist';
            if (!fs.existsSync(distDir)) {
              core.setFailed('dist not found after build');
              return;
            }
            const candidates = fs.readdirSync(distDir).filter(f => /\.(exe|zip|dmg|AppImage)$/i.test(f));
            if (candidates.length === 0) {
              core.warning('No installer artifacts found to hash.');
            }
            let note = `SHA-256 checksums (${process.platform}):\n`;
            for (const f of candidates) {
              const p = path.join(distDir, f);
              const buff = fs.readFileSync(p);
              const hash = crypto.createHash('sha256').update(buff).digest('hex');
              note += `- ${f}: ${hash}\n`;
            }
            const tag = context.ref.replace('refs/tags/','');
            const rel = await github.rest.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag });
            const newBody = ((rel.data.body || '') + '\n\n' + note).trim();
            await github.rest.repos.updateRelease({ owner: context.repo.owner, repo: context.repo.repo, release_id: rel.data.id, body: newBody });

      - name: Upload dist artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/**
          if-no-files-found: warn
